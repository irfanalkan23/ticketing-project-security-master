# See: https://circleci.com/docs/configuration-reference
version: 2

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
# Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
# See: https://circleci.com/docs/configuration-reference/#executor-job
#  you can give a custom name to jobs; "build", "docker-image-and-publish", "deploy-job"
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:11-jdk
    working_directory: /tmp/workspace
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      # get the code from GitHub
      - checkout
      # create folder, parent: /tmp/workspace
      - run: mkdir -p /tmp/workspace
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # run the unit tests
      - run: mvn clean install -DskipTests
      # when you run the first time, it skips restore_cache and runs save_cache
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      # define the workspace here, then attach to other jobs
      - persist_to_workspace:
          root: /tmp/workspace
          paths: .
  docker-image-and-publish:
    machine: true
    steps:
      - attach_workspace:
          at: /tmp/workspace
      # just to check if the images are in the folder
      - run: ls -a /tmp/workspace
      - run:
          name: Create Docker image and push to ECR
          # get the commands from AWS "Push commands for ticketingapp"
          # !!! CHANGE THE ID (289073749577), AND put "/tmp/workspace" instead of "."
          command: aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 289073749577.dkr.ecr.eu-west-2.amazonaws.com && docker build -t ticketinapp /tmp/workspace && docker tag ticketinapp:latest 289073749577.dkr.ecr.eu-west-2.amazonaws.com/ticketinapp:latest && docker push 289073749577.dkr.ecr.eu-west-2.amazonaws.com/ticketinapp:latest
  deploy-job:
    docker:
      #specify the version you desire here
      - image: circleci/node:10.0.0
    steps:
      - run:
          name: Execute Deployment Script
          command: |
            ssh -o "StrictHostKeyChecking=no" ec2-user@ec2-13-41-193-175.eu-west-2.compute.amazonaws.com <<'ENDSSH'
            /bin/bash bin/deploy_image.sh
            docker ps
# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - docker-image-and-publish:
          requires:
            - build
      - deploy-job:
          requires:
            - docker-image-and-publish
